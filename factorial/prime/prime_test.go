package prime_test

import (
	"math/big"
	"testing"

	"github.com/soniakeys/integer/factorial/prime"
	"github.com/soniakeys/integer/swing"
)

func TestPrime(t *testing.T) {
	var f big.Int
	for _, tc := range tcs {
		if fs := prime.Factorial(&f, tc.n).String(); fs != tc.s {
			t.Errorf("%d! incorrect.  expected %s, got %s", tc.n, tc.s, fs)
		}
	}
}

var ps = swing.New(1e5)

func TestPrimeS(t *testing.T) {
	var f big.Int
	for _, tc := range tcs {
		if fs := prime.FactorialS(&f, ps, tc.n).String(); fs != tc.s {
			t.Errorf("%d! incorrect.  expected %s, got %s", tc.n, tc.s, fs)
		}
	}
}

func Benchmark1e2(b *testing.B) {
	var f big.Int
	for i := 0; i < b.N; i++ {
		prime.Factorial(&f, 1e2)
	}
}

func Benchmark1e3(b *testing.B) {
	var f big.Int
	for i := 0; i < b.N; i++ {
		prime.Factorial(&f, 1e3)
	}
}

func Benchmark1e4(b *testing.B) {
	var f big.Int
	for i := 0; i < b.N; i++ {
		prime.Factorial(&f, 1e4)
	}
}

func Benchmark1e5(b *testing.B) {
	var f big.Int
	for i := 0; i < b.N; i++ {
		prime.Factorial(&f, 1e5)
	}
}

func BenchmarkS1e2(b *testing.B) {
	var f big.Int
	for i := 0; i < b.N; i++ {
		prime.FactorialS(&f, ps, 1e2)
	}
}

func BenchmarkS1e3(b *testing.B) {
	var f big.Int
	for i := 0; i < b.N; i++ {
		prime.FactorialS(&f, ps, 1e3)
	}
}

func BenchmarkS1e4(b *testing.B) {
	var f big.Int
	for i := 0; i < b.N; i++ {
		prime.FactorialS(&f, ps, 1e4)
	}
}

func BenchmarkS1e5(b *testing.B) {
	var f big.Int
	for i := 0; i < b.N; i++ {
		prime.FactorialS(&f, ps, 1e5)
	}
}

var tcs = []struct {
	n uint
	s string
}{
	{0, "1"},
	{1, "1"},
	{2, "2"},
	{3, "6"},
	{4, "24"},
	{5, "120"},
	// 20 is the first number that exercises the split factorial code
	{20, "2432902008176640000"},
	// 65 is the first number that exercises the split odd swing code
	{65, "8247650592082470666723170306785496252186258551345437492922123134388955774976000000000000000"},
	{100, "93326215443944152681699238856266700490715968264381621468592963895217599993229915608941463976156518286253697920827223758251185210916864000000000000000000000000"},
	// 402 is the first number that exercises the split primorial code
	{402, "10322493151921465164081017511444523549144957788957729070658850054871632028467255601190963314928373192348001901396930189622367360453148777593779130493841936873495349332423413459470518031076600468677681086479354644916620480632630350145970538235260826120203515476630017152557002993632050731959317164706296917171625287200618560036028326143938282329483693985566225033103398611546364400484246579470387915281737632989645795534475998050620039413447425490893877731061666015468384131920640823824733578473025588407103553854530737735183050931478983505845362197959913863770041359352031682005647007823330600995250982455385703739491695583970372977196372367980241040180516191489137558020294105537577853569647066137370488100581103217089054291400441697731894590238418118698720784367447615471616000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"},
	// 800 was a popular test case on Rosetta Code
	{800, "771053011335386004144639397775028360595556401816010239163410994033970851827093069367090769795539033092647861224230677444659785152639745401480184653174909762504470638274259120173309701702610875092918816846985842150593623718603861642063078834117234098513725265045402523056575658860621238870412640219629971024686826624713383660963127048195572279707711688352620259869140994901287895747290410722496106151954257267396322405556727354786893725785838732404646243357335918597747405776328924775897564519583591354080898117023132762250714057271344110948164029940588827847780442314473200479525138318208302427727803133219305210952507605948994314345449325259594876385922128494560437296428386002940601874072732488897504223793518377180605441783116649708269946061380230531018291930510748665577803014523251797790388615033756544830374909440162270182952303329091720438210637097105616258387051884030288933650309756289188364568672104084185529365727646234588306683493594765274559497543759651733699820639731702116912963247441294200297800087061725868223880865243583365623482704395893652711840735418799773763054887588219943984673401051362280384187818611005035187862707840912942753454646054674870155072495767509778534059298038364204076299048072934501046255175378323008217670731649519955699084482330798811049166276249251326544312580289357812924825898217462848297648349400838815410152872456707653654424335818651136964880049831580548028614922852377435001511377656015730959254647171290930517340367287657007606177675483830521499707873449016844402390203746633086969747680671468541687265823637922007413849118593487710272883164905548707198762911703545119701275432473548172544699118836274377270607420652133092686282081777383674487881628800801928103015832821021286322120460874941697199487758769730544922012389694504960000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"},
}
